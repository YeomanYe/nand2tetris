// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 * 0000 0001
 * 1000 1001
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in = load, sel[0] = address[3], sel[1] = address[4], sel[2] = address[5], a = a, b = b, c = c, d = d, e = e, f = f, g = g, h = h);
    RAM8(in = in, load = a, out = out0, address[0] = address[0], address[1] = address[1], address[2] = address[2]);
    RAM8(in = in, load = b, out = out1, address[0] = address[0], address[1] = address[1], address[2] = address[2]);
    RAM8(in = in, load = c, out = out2, address[0] = address[0], address[1] = address[1], address[2] = address[2]);
    RAM8(in = in, load = d, out = out3, address[0] = address[0], address[1] = address[1], address[2] = address[2]);
    RAM8(in = in, load = e, out = out4, address[0] = address[0], address[1] = address[1], address[2] = address[2]);
    RAM8(in = in, load = f, out = out5, address[0] = address[0], address[1] = address[1], address[2] = address[2]);
    RAM8(in = in, load = g, out = out6, address[0] = address[0], address[1] = address[1], address[2] = address[2]);
    RAM8(in = in, load = h, out = out7, address[0] = address[0], address[1] = address[1], address[2] = address[2]);
    Mux8Way16(a = out0, b = out1, c = out2, d = out3, e = out4, f = out5, g = out6, h = out7, sel[0] = address[3], sel[1] = address[4], sel[2] = address[5], out = out);
}