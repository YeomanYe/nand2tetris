// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not(in = zx, out = nzx);
   // 获得低、高电平
   And(a = zx, b = nzx, out = ll);
   Not(in = ll, out = hl);
   // 获得16位0电平
   Const16(in = ll, out = z16);
   // 对x进行处理
   Mux16(a = x, b = z16, sel = zx, out = x0);
   Not16(in = x0, out = ox);
   Mux16(a = x0, b = ox, sel = nx, out = x1);
   // 对y进行相同处理
   Mux16(a = y, b = z16, sel = zy, out = y0);
   Not16(in = y0, out = oy);
   Mux16(a = y0, b = oy, sel = ny, out = y1);
   // out运算
   And16(a = x1, b = y1, out = out0);
   Add16(a = x1, b = y1, out = out1);
   Mux16(a = out0, b = out1, sel = f, out = out2);
   Not16(in = out2, out = out3);
   Mux16(a = out2, b = out3, sel = no, out = out4);
   // out不能直接赋值给in，所以给他命名为out4，然后再取反取回来
   Not16(in = out4, out = out5);
   Not16(in = out5, out = out);
   // zr计算
   Or16Way(in = out4, out = zr0);
   Not(in = zr0, out = zr);
   // ng计算
   IsNeq16(in = out4, out = isneq);
   Mux(a = ll, b = hl, sel = isneq, out = ng);
}